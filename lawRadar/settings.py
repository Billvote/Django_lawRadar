"""
Django settings for lawRadar project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from django.conf import settings

from dotenv import load_dotenv
import os
load_dotenv()
# from decouple import config

# import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = 'collectstatic'

AUTH_USER_MODEL = 'accounts.User'
SOCIAL_AUTH_USER_MODEL = AUTH_USER_MODEL

# 소셜 로그인 관련 설정
AUTHENTICATION_BACKENDS = (
    'social_core.backends.naver.NaverOAuth2',   # 네이버 로그인 백엔드
    'social_core.backends.google.GoogleOAuth2', # 구글 소셜 로그인 백엔드
    'social_core.backends.kakao.KakaoOAuth2',  # 카카오 소셜 로그인 백엔드
    'django.contrib.auth.backends.ModelBackend',  # 일반 로그인
)

# 로그인 후 리다이렉트 URL (로그인 성공 후 이동할 곳)
LOGIN_REDIRECT_URL = '/accounts/myPage/'  # 네가 원하는 페이지 경로로 바꿔도 됨
# 로그아웃 후 이동할 URL
LOGOUT_REDIRECT_URL = '/'

# 세션 키 등 기본 세팅 (있으면 유지)
SOCIAL_AUTH_URL_NAMESPACE = 'social'
# 카카오 OAuth2 설정g
SOCIAL_AUTH_KAKAO_KEY = os.getenv('SOCIAL_AUTH_KAKAO_KEY')

# (선택) 카카오에서 이메일도 받아오고 싶으면
SOCIAL_AUTH_KAKAO_SCOPE = ['profile_nickname']
# (선택) 이메일이 없으면 회원가입 불가하게 하고 싶으면
# SOCIAL_AUTH_USER_FIELDS = ['username', 'email', 'first_name', 'last_name']
# (필요 시) 로그인 실패 시 이동 URL
SOCIAL_AUTH_LOGIN_ERROR_URL = '/accounts/login/'
# (필요 시) 로그인 취소 시 이동 URL
SOCIAL_AUTH_LOGIN_CANCEL_URL = '/accounts/login/'


# 구글 소셜 로그인
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

# 네이버 OAuth 키
SOCIAL_AUTH_NAVER_KEY = os.getenv('SOCIAL_AUTH_NAVER_KEY')
SOCIAL_AUTH_NAVER_SECRET = os.getenv('SOCIAL_AUTH_NAVER_SECRET')

# API 키 가져오기
# ASSEMBLY_API_KEY = os.environ.get("ASSEMBLY_API_KEY", "default-value")

# 개발용 캐시 끄기
if settings.DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xtpiq=arsxdi6ak@qrl-qt$#!onbzwwvipa0y5ha-urmtt#=@&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "*",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'billview',
    'geovote',
    'main',
    'dashboard',
    'history',
    'cardnews',
    'accounts',
    'widget_tweaks',
    'social_django',
    # 'django_extensions'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lawRadar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lawRadar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'accounts.validators.MySimilarityValidator',
    },
    {
        'NAME': 'accounts.validators.MyMinLengthValidator', 'OPTIONS' : {'min_length': 8},
    },
    {
        'NAME': 'accounts.validators.MyCommonValidator',
    },
    {
        'NAME': 'accounts.validators.MyNumericValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 프로젝트/settings.py 맨 아래에 추가
def patch_broken_pipe_error():
    import sys
    from socketserver import BaseServer
    from wsgiref import handlers

    handle_error = BaseServer.handle_error
    log_exception = handlers.BaseHandler.log_exception

    def is_broken_pipe_error():
        type_, err, tb = sys.exc_info()
        return repr(err) == "error(32, 'Broken pipe')"

    def my_handle_error(self, request, client_address):
        if not is_broken_pipe_error():
            handle_error(self, request, client_address)

    def my_log_exception(self, exc_info):
        if not is_broken_pipe_error():
            log_exception(self, exc_info)

    # 핵심: 메서드 재할당 방식 수정
    BaseServer.handle_error = my_handle_error
    handlers.BaseHandler.log_exception = my_log_exception

patch_broken_pipe_error()
